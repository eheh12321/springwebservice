language: java
jdk:
  - openjdk11

# 어느 브랜치가 푸시될 때 수행할 지 결정
branches:
  only: # master branch에 push될 때만 수행하라
    - master

# Travis CI Server Home
# gradle을 통해 의존성을 받으면 이를 해당 디렉토리에 캐싱, 동일한 의존성은 다음 배포때부터 다시 받지 않도록 한다
cache:
  directories:
    - '$HOME/.m2/repository'
    - '$HOME/.gradle'

# master branch에 push되었을 때 수행되는 명령어
script: "./gradlew clean build"

# Travis CI에서 Build한 Jar 파일을 S3에 올리는 과정
before_deploy:
  # CodeDeploy는 Jar 파일을 인식할 수 없으므로 Jar + 기타 설정파일을 모아 zip으로 압축시킨다
  - mkdir -p before-deploy # Travis는 디렉토리 단위로만 업로드 가능
  - cp scripts/*.sh before-deploy/ # 배포에 필요한 파일만 꼽아서 복사
  - cp appspec.yml before-deploy/
  - cp build/libs/*.jar before-deploy/
  - cd before-deploy && zip -r before-deploy * # before-deploy로 이동 후 내부 파일 전체 압축
  - cd ../ && mkdir -p deploy # 상위 디렉토리로 이동 후 deploy 디렉토리 생성
  - mv before-deploy/before-deploy.zip deploy/springwebservice.zip # 이동 및 이름 바꾸기

# S3으로 파일 업로드 또는 CodeDeploy로 배포 등 외부 서비스와 연동될 행위 선언
deploy:
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY # Travis 웹에서 설정한 환경변수 사용
    secret_access_key: $AWS_SECRET_KEY
    bucket: my-springboot-build
    region: ap-northeast-2
    skip_cleanup: true
    acl: private
    local_dir: deploy # 해당 위치의 파일들만 s3으로 전송한다
    wait-until-deployed: true

  - provider: codedeploy
    access_key_id: $AWS_ACCESS_KEY # Travis 웹에서 설정한 환경변수 사용
    secret_access_key: $AWS_SECRET_KEY
    bucket: my-springboot-build
    key: springwebservice.zip
    bundle_type: zip
    application: springboot-webservice
    deployment_group: springboot-webservice-group
    region: ap-northeast-2
    wait-until-deployed: true

# CI 완료 시 메일로 알람
notifications:
  email:
    recipients:
      - 'eheh12321@gmail.com'